// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ncgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NcGoServiceClient is the client API for NcGoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NcGoServiceClient interface {
	FindAll(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ArticleSet, error)
}

type ncGoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNcGoServiceClient(cc grpc.ClientConnInterface) NcGoServiceClient {
	return &ncGoServiceClient{cc}
}

func (c *ncGoServiceClient) FindAll(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*ArticleSet, error) {
	out := new(ArticleSet)
	err := c.cc.Invoke(ctx, "/ncgo.ncGoService/findAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NcGoServiceServer is the server API for NcGoService service.
// All implementations must embed UnimplementedNcGoServiceServer
// for forward compatibility
type NcGoServiceServer interface {
	FindAll(context.Context, *QueryRequest) (*ArticleSet, error)
	mustEmbedUnimplementedNcGoServiceServer()
}

// UnimplementedNcGoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNcGoServiceServer struct {
}

func (UnimplementedNcGoServiceServer) FindAll(context.Context, *QueryRequest) (*ArticleSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAll not implemented")
}
func (UnimplementedNcGoServiceServer) mustEmbedUnimplementedNcGoServiceServer() {}

// UnsafeNcGoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NcGoServiceServer will
// result in compilation errors.
type UnsafeNcGoServiceServer interface {
	mustEmbedUnimplementedNcGoServiceServer()
}

func RegisterNcGoServiceServer(s grpc.ServiceRegistrar, srv NcGoServiceServer) {
	s.RegisterService(&_NcGoService_serviceDesc, srv)
}

func _NcGoService_FindAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NcGoServiceServer).FindAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncgo.ncGoService/findAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NcGoServiceServer).FindAll(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NcGoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncgo.ncGoService",
	HandlerType: (*NcGoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findAll",
			Handler:    _NcGoService_FindAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ncgo.proto",
}
